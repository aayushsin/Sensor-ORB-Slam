# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensor_synchronizer/SyncDataMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_msgs.msg
import std_msgs.msg

class SyncDataMsg(genpy.Message):
  _md5sum = "bb36a0519783c0150aa9338d8c91d61c"
  _type = "sensor_synchronizer/SyncDataMsg"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
sensor_msgs/Image image_left
sensor_msgs/Image image_right
float64 range_distance
float64[] rtk_matrix_rotm
float64[] rtk_matrix_euler
float64 rtk_latitude
float64 rtk_longitude
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)
"""
  __slots__ = ['header','image_left','image_right','range_distance','rtk_matrix_rotm','rtk_matrix_euler','rtk_latitude','rtk_longitude']
  _slot_types = ['std_msgs/Header','sensor_msgs/Image','sensor_msgs/Image','float64','float64[]','float64[]','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,image_left,image_right,range_distance,rtk_matrix_rotm,rtk_matrix_euler,rtk_latitude,rtk_longitude

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SyncDataMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_left is None:
        self.image_left = sensor_msgs.msg.Image()
      if self.image_right is None:
        self.image_right = sensor_msgs.msg.Image()
      if self.range_distance is None:
        self.range_distance = 0.
      if self.rtk_matrix_rotm is None:
        self.rtk_matrix_rotm = []
      if self.rtk_matrix_euler is None:
        self.rtk_matrix_euler = []
      if self.rtk_latitude is None:
        self.rtk_latitude = 0.
      if self.rtk_longitude is None:
        self.rtk_longitude = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.image_left = sensor_msgs.msg.Image()
      self.image_right = sensor_msgs.msg.Image()
      self.range_distance = 0.
      self.rtk_matrix_rotm = []
      self.rtk_matrix_euler = []
      self.rtk_latitude = 0.
      self.rtk_longitude = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.image_left.header.seq, _x.image_left.header.stamp.secs, _x.image_left.header.stamp.nsecs))
      _x = self.image_left.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.image_left.height, _x.image_left.width))
      _x = self.image_left.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.image_left.is_bigendian, _x.image_left.step))
      _x = self.image_left.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.image_right.header.seq, _x.image_right.header.stamp.secs, _x.image_right.header.stamp.nsecs))
      _x = self.image_right.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.image_right.height, _x.image_right.width))
      _x = self.image_right.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.image_right.is_bigendian, _x.image_right.step))
      _x = self.image_right.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.range_distance))
      length = len(self.rtk_matrix_rotm)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.rtk_matrix_rotm))
      length = len(self.rtk_matrix_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.rtk_matrix_euler))
      _x = self
      buff.write(_struct_2d.pack(_x.rtk_latitude, _x.rtk_longitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_left is None:
        self.image_left = sensor_msgs.msg.Image()
      if self.image_right is None:
        self.image_right = sensor_msgs.msg.Image()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_left.header.seq, _x.image_left.header.stamp.secs, _x.image_left.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_left.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image_left.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image_left.height, _x.image_left.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_left.encoding = str[start:end].decode('utf-8')
      else:
        self.image_left.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image_left.is_bigendian, _x.image_left.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image_left.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_right.header.seq, _x.image_right.header.stamp.secs, _x.image_right.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_right.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image_right.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image_right.height, _x.image_right.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_right.encoding = str[start:end].decode('utf-8')
      else:
        self.image_right.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image_right.is_bigendian, _x.image_right.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image_right.data = str[start:end]
      start = end
      end += 8
      (self.range_distance,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.rtk_matrix_rotm = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.rtk_matrix_euler = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.rtk_latitude, _x.rtk_longitude,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.image_left.header.seq, _x.image_left.header.stamp.secs, _x.image_left.header.stamp.nsecs))
      _x = self.image_left.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.image_left.height, _x.image_left.width))
      _x = self.image_left.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.image_left.is_bigendian, _x.image_left.step))
      _x = self.image_left.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.image_right.header.seq, _x.image_right.header.stamp.secs, _x.image_right.header.stamp.nsecs))
      _x = self.image_right.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.image_right.height, _x.image_right.width))
      _x = self.image_right.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.image_right.is_bigendian, _x.image_right.step))
      _x = self.image_right.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.range_distance))
      length = len(self.rtk_matrix_rotm)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.rtk_matrix_rotm.tostring())
      length = len(self.rtk_matrix_euler)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.rtk_matrix_euler.tostring())
      _x = self
      buff.write(_struct_2d.pack(_x.rtk_latitude, _x.rtk_longitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_left is None:
        self.image_left = sensor_msgs.msg.Image()
      if self.image_right is None:
        self.image_right = sensor_msgs.msg.Image()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_left.header.seq, _x.image_left.header.stamp.secs, _x.image_left.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_left.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image_left.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image_left.height, _x.image_left.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_left.encoding = str[start:end].decode('utf-8')
      else:
        self.image_left.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image_left.is_bigendian, _x.image_left.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image_left.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_right.header.seq, _x.image_right.header.stamp.secs, _x.image_right.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_right.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image_right.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image_right.height, _x.image_right.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_right.encoding = str[start:end].decode('utf-8')
      else:
        self.image_right.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image_right.is_bigendian, _x.image_right.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image_right.data = str[start:end]
      start = end
      end += 8
      (self.range_distance,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.rtk_matrix_rotm = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.rtk_matrix_euler = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.rtk_latitude, _x.rtk_longitude,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_d = struct.Struct("<d")
_struct_3I = struct.Struct("<3I")
_struct_2I = struct.Struct("<2I")
_struct_BI = struct.Struct("<BI")
