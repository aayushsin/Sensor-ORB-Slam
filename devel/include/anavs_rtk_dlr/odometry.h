// Generated by gencpp from file anavs_rtk_dlr/odometry.msg
// DO NOT EDIT!


#ifndef ANAVS_RTK_DLR_MESSAGE_ODOMETRY_H
#define ANAVS_RTK_DLR_MESSAGE_ODOMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace anavs_rtk_dlr
{
template <class ContainerAllocator>
struct odometry_
{
  typedef odometry_<ContainerAllocator> Type;

  odometry_()
    : header()
    , rtk_matrix_euler()
    , rtk_matrix_rotm()
    , rtk_latitude(0.0)
    , rtk_longitude(0.0)  {
    }
  odometry_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , rtk_matrix_euler(_alloc)
    , rtk_matrix_rotm(_alloc)
    , rtk_latitude(0.0)
    , rtk_longitude(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _rtk_matrix_euler_type;
  _rtk_matrix_euler_type rtk_matrix_euler;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _rtk_matrix_rotm_type;
  _rtk_matrix_rotm_type rtk_matrix_rotm;

   typedef double _rtk_latitude_type;
  _rtk_latitude_type rtk_latitude;

   typedef double _rtk_longitude_type;
  _rtk_longitude_type rtk_longitude;




  typedef boost::shared_ptr< ::anavs_rtk_dlr::odometry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anavs_rtk_dlr::odometry_<ContainerAllocator> const> ConstPtr;

}; // struct odometry_

typedef ::anavs_rtk_dlr::odometry_<std::allocator<void> > odometry;

typedef boost::shared_ptr< ::anavs_rtk_dlr::odometry > odometryPtr;
typedef boost::shared_ptr< ::anavs_rtk_dlr::odometry const> odometryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anavs_rtk_dlr::odometry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anavs_rtk_dlr::odometry_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace anavs_rtk_dlr

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'anavs_rtk_dlr': ['/home/yhlee/Sensor_Sync/src/anavs_rtk_dlr/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::anavs_rtk_dlr::odometry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anavs_rtk_dlr::odometry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anavs_rtk_dlr::odometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anavs_rtk_dlr::odometry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anavs_rtk_dlr::odometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anavs_rtk_dlr::odometry_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anavs_rtk_dlr::odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2f0231f8165be3ce395cb35e551e3a0";
  }

  static const char* value(const ::anavs_rtk_dlr::odometry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2f0231f8165be3cULL;
  static const uint64_t static_value2 = 0xe395cb35e551e3a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::anavs_rtk_dlr::odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anavs_rtk_dlr/odometry";
  }

  static const char* value(const ::anavs_rtk_dlr::odometry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anavs_rtk_dlr::odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64[] rtk_matrix_euler\n\
float64[] rtk_matrix_rotm\n\
float64 rtk_latitude\n\
float64 rtk_longitude\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::anavs_rtk_dlr::odometry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anavs_rtk_dlr::odometry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.rtk_matrix_euler);
      stream.next(m.rtk_matrix_rotm);
      stream.next(m.rtk_latitude);
      stream.next(m.rtk_longitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct odometry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anavs_rtk_dlr::odometry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anavs_rtk_dlr::odometry_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "rtk_matrix_euler[]" << std::endl;
    for (size_t i = 0; i < v.rtk_matrix_euler.size(); ++i)
    {
      s << indent << "  rtk_matrix_euler[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rtk_matrix_euler[i]);
    }
    s << indent << "rtk_matrix_rotm[]" << std::endl;
    for (size_t i = 0; i < v.rtk_matrix_rotm.size(); ++i)
    {
      s << indent << "  rtk_matrix_rotm[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rtk_matrix_rotm[i]);
    }
    s << indent << "rtk_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.rtk_latitude);
    s << indent << "rtk_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.rtk_longitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANAVS_RTK_DLR_MESSAGE_ODOMETRY_H
